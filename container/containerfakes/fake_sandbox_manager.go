// Code generated by counterfeiter. DO NOT EDIT.
package containerfakes

import (
	"sync"

	"code.cloudfoundry.org/winc/container"
)

type FakeSandboxManager struct {
	CreateStub        func(rootfs string) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		rootfs string
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func() error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct{}
	deleteReturns     struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	BundlePathStub        func() string
	bundlePathMutex       sync.RWMutex
	bundlePathArgsForCall []struct{}
	bundlePathReturns     struct {
		result1 string
	}
	bundlePathReturnsOnCall map[int]struct {
		result1 string
	}
	MountStub        func(pid int) error
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		pid int
	}
	mountReturns struct {
		result1 error
	}
	mountReturnsOnCall map[int]struct {
		result1 error
	}
	UnmountStub        func(pid int) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		pid int
	}
	unmountReturns struct {
		result1 error
	}
	unmountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSandboxManager) Create(rootfs string) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		rootfs string
	}{rootfs})
	fake.recordInvocation("Create", []interface{}{rootfs})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(rootfs)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeSandboxManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeSandboxManager) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].rootfs
}

func (fake *FakeSandboxManager) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) Delete() error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct{}{})
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeSandboxManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeSandboxManager) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) BundlePath() string {
	fake.bundlePathMutex.Lock()
	ret, specificReturn := fake.bundlePathReturnsOnCall[len(fake.bundlePathArgsForCall)]
	fake.bundlePathArgsForCall = append(fake.bundlePathArgsForCall, struct{}{})
	fake.recordInvocation("BundlePath", []interface{}{})
	fake.bundlePathMutex.Unlock()
	if fake.BundlePathStub != nil {
		return fake.BundlePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bundlePathReturns.result1
}

func (fake *FakeSandboxManager) BundlePathCallCount() int {
	fake.bundlePathMutex.RLock()
	defer fake.bundlePathMutex.RUnlock()
	return len(fake.bundlePathArgsForCall)
}

func (fake *FakeSandboxManager) BundlePathReturns(result1 string) {
	fake.BundlePathStub = nil
	fake.bundlePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSandboxManager) BundlePathReturnsOnCall(i int, result1 string) {
	fake.BundlePathStub = nil
	if fake.bundlePathReturnsOnCall == nil {
		fake.bundlePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.bundlePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSandboxManager) Mount(pid int) error {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		pid int
	}{pid})
	fake.recordInvocation("Mount", []interface{}{pid})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(pid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mountReturns.result1
}

func (fake *FakeSandboxManager) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeSandboxManager) MountArgsForCall(i int) int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].pid
}

func (fake *FakeSandboxManager) MountReturns(result1 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) MountReturnsOnCall(i int, result1 error) {
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) Unmount(pid int) error {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		pid int
	}{pid})
	fake.recordInvocation("Unmount", []interface{}{pid})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(pid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmountReturns.result1
}

func (fake *FakeSandboxManager) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeSandboxManager) UnmountArgsForCall(i int) int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].pid
}

func (fake *FakeSandboxManager) UnmountReturns(result1 error) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) UnmountReturnsOnCall(i int, result1 error) {
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSandboxManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.bundlePathMutex.RLock()
	defer fake.bundlePathMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSandboxManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ container.SandboxManager = new(FakeSandboxManager)
