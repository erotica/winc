// Code generated by counterfeiter. DO NOT EDIT.
package networkfakes

import (
	"sync"

	"code.cloudfoundry.org/winc/network"
	"github.com/Microsoft/hcsshim"
)

type FakeHCSClient struct {
	GetHNSNetworkByNameStub        func(string) (*hcsshim.HNSNetwork, error)
	getHNSNetworkByNameMutex       sync.RWMutex
	getHNSNetworkByNameArgsForCall []struct {
		arg1 string
	}
	getHNSNetworkByNameReturns struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}
	getHNSNetworkByNameReturnsOnCall map[int]struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}
	CreateNetworkStub        func(*hcsshim.HNSNetwork) (*hcsshim.HNSNetwork, error)
	createNetworkMutex       sync.RWMutex
	createNetworkArgsForCall []struct {
		arg1 *hcsshim.HNSNetwork
	}
	createNetworkReturns struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}
	createNetworkReturnsOnCall map[int]struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}
	CreateEndpointStub        func(*hcsshim.HNSEndpoint) (*hcsshim.HNSEndpoint, error)
	createEndpointMutex       sync.RWMutex
	createEndpointArgsForCall []struct {
		arg1 *hcsshim.HNSEndpoint
	}
	createEndpointReturns struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	createEndpointReturnsOnCall map[int]struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	GetHNSEndpointByIDStub        func(string) (*hcsshim.HNSEndpoint, error)
	getHNSEndpointByIDMutex       sync.RWMutex
	getHNSEndpointByIDArgsForCall []struct {
		arg1 string
	}
	getHNSEndpointByIDReturns struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	getHNSEndpointByIDReturnsOnCall map[int]struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	DeleteEndpointStub        func(*hcsshim.HNSEndpoint) (*hcsshim.HNSEndpoint, error)
	deleteEndpointMutex       sync.RWMutex
	deleteEndpointArgsForCall []struct {
		arg1 *hcsshim.HNSEndpoint
	}
	deleteEndpointReturns struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	deleteEndpointReturnsOnCall map[int]struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHCSClient) GetHNSNetworkByName(arg1 string) (*hcsshim.HNSNetwork, error) {
	fake.getHNSNetworkByNameMutex.Lock()
	ret, specificReturn := fake.getHNSNetworkByNameReturnsOnCall[len(fake.getHNSNetworkByNameArgsForCall)]
	fake.getHNSNetworkByNameArgsForCall = append(fake.getHNSNetworkByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetHNSNetworkByName", []interface{}{arg1})
	fake.getHNSNetworkByNameMutex.Unlock()
	if fake.GetHNSNetworkByNameStub != nil {
		return fake.GetHNSNetworkByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getHNSNetworkByNameReturns.result1, fake.getHNSNetworkByNameReturns.result2
}

func (fake *FakeHCSClient) GetHNSNetworkByNameCallCount() int {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	return len(fake.getHNSNetworkByNameArgsForCall)
}

func (fake *FakeHCSClient) GetHNSNetworkByNameArgsForCall(i int) string {
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	return fake.getHNSNetworkByNameArgsForCall[i].arg1
}

func (fake *FakeHCSClient) GetHNSNetworkByNameReturns(result1 *hcsshim.HNSNetwork, result2 error) {
	fake.GetHNSNetworkByNameStub = nil
	fake.getHNSNetworkByNameReturns = struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) GetHNSNetworkByNameReturnsOnCall(i int, result1 *hcsshim.HNSNetwork, result2 error) {
	fake.GetHNSNetworkByNameStub = nil
	if fake.getHNSNetworkByNameReturnsOnCall == nil {
		fake.getHNSNetworkByNameReturnsOnCall = make(map[int]struct {
			result1 *hcsshim.HNSNetwork
			result2 error
		})
	}
	fake.getHNSNetworkByNameReturnsOnCall[i] = struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) CreateNetwork(arg1 *hcsshim.HNSNetwork) (*hcsshim.HNSNetwork, error) {
	fake.createNetworkMutex.Lock()
	ret, specificReturn := fake.createNetworkReturnsOnCall[len(fake.createNetworkArgsForCall)]
	fake.createNetworkArgsForCall = append(fake.createNetworkArgsForCall, struct {
		arg1 *hcsshim.HNSNetwork
	}{arg1})
	fake.recordInvocation("CreateNetwork", []interface{}{arg1})
	fake.createNetworkMutex.Unlock()
	if fake.CreateNetworkStub != nil {
		return fake.CreateNetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createNetworkReturns.result1, fake.createNetworkReturns.result2
}

func (fake *FakeHCSClient) CreateNetworkCallCount() int {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return len(fake.createNetworkArgsForCall)
}

func (fake *FakeHCSClient) CreateNetworkArgsForCall(i int) *hcsshim.HNSNetwork {
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	return fake.createNetworkArgsForCall[i].arg1
}

func (fake *FakeHCSClient) CreateNetworkReturns(result1 *hcsshim.HNSNetwork, result2 error) {
	fake.CreateNetworkStub = nil
	fake.createNetworkReturns = struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) CreateNetworkReturnsOnCall(i int, result1 *hcsshim.HNSNetwork, result2 error) {
	fake.CreateNetworkStub = nil
	if fake.createNetworkReturnsOnCall == nil {
		fake.createNetworkReturnsOnCall = make(map[int]struct {
			result1 *hcsshim.HNSNetwork
			result2 error
		})
	}
	fake.createNetworkReturnsOnCall[i] = struct {
		result1 *hcsshim.HNSNetwork
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) CreateEndpoint(arg1 *hcsshim.HNSEndpoint) (*hcsshim.HNSEndpoint, error) {
	fake.createEndpointMutex.Lock()
	ret, specificReturn := fake.createEndpointReturnsOnCall[len(fake.createEndpointArgsForCall)]
	fake.createEndpointArgsForCall = append(fake.createEndpointArgsForCall, struct {
		arg1 *hcsshim.HNSEndpoint
	}{arg1})
	fake.recordInvocation("CreateEndpoint", []interface{}{arg1})
	fake.createEndpointMutex.Unlock()
	if fake.CreateEndpointStub != nil {
		return fake.CreateEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createEndpointReturns.result1, fake.createEndpointReturns.result2
}

func (fake *FakeHCSClient) CreateEndpointCallCount() int {
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	return len(fake.createEndpointArgsForCall)
}

func (fake *FakeHCSClient) CreateEndpointArgsForCall(i int) *hcsshim.HNSEndpoint {
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	return fake.createEndpointArgsForCall[i].arg1
}

func (fake *FakeHCSClient) CreateEndpointReturns(result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.CreateEndpointStub = nil
	fake.createEndpointReturns = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) CreateEndpointReturnsOnCall(i int, result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.CreateEndpointStub = nil
	if fake.createEndpointReturnsOnCall == nil {
		fake.createEndpointReturnsOnCall = make(map[int]struct {
			result1 *hcsshim.HNSEndpoint
			result2 error
		})
	}
	fake.createEndpointReturnsOnCall[i] = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) GetHNSEndpointByID(arg1 string) (*hcsshim.HNSEndpoint, error) {
	fake.getHNSEndpointByIDMutex.Lock()
	ret, specificReturn := fake.getHNSEndpointByIDReturnsOnCall[len(fake.getHNSEndpointByIDArgsForCall)]
	fake.getHNSEndpointByIDArgsForCall = append(fake.getHNSEndpointByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetHNSEndpointByID", []interface{}{arg1})
	fake.getHNSEndpointByIDMutex.Unlock()
	if fake.GetHNSEndpointByIDStub != nil {
		return fake.GetHNSEndpointByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getHNSEndpointByIDReturns.result1, fake.getHNSEndpointByIDReturns.result2
}

func (fake *FakeHCSClient) GetHNSEndpointByIDCallCount() int {
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	return len(fake.getHNSEndpointByIDArgsForCall)
}

func (fake *FakeHCSClient) GetHNSEndpointByIDArgsForCall(i int) string {
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	return fake.getHNSEndpointByIDArgsForCall[i].arg1
}

func (fake *FakeHCSClient) GetHNSEndpointByIDReturns(result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.GetHNSEndpointByIDStub = nil
	fake.getHNSEndpointByIDReturns = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) GetHNSEndpointByIDReturnsOnCall(i int, result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.GetHNSEndpointByIDStub = nil
	if fake.getHNSEndpointByIDReturnsOnCall == nil {
		fake.getHNSEndpointByIDReturnsOnCall = make(map[int]struct {
			result1 *hcsshim.HNSEndpoint
			result2 error
		})
	}
	fake.getHNSEndpointByIDReturnsOnCall[i] = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) DeleteEndpoint(arg1 *hcsshim.HNSEndpoint) (*hcsshim.HNSEndpoint, error) {
	fake.deleteEndpointMutex.Lock()
	ret, specificReturn := fake.deleteEndpointReturnsOnCall[len(fake.deleteEndpointArgsForCall)]
	fake.deleteEndpointArgsForCall = append(fake.deleteEndpointArgsForCall, struct {
		arg1 *hcsshim.HNSEndpoint
	}{arg1})
	fake.recordInvocation("DeleteEndpoint", []interface{}{arg1})
	fake.deleteEndpointMutex.Unlock()
	if fake.DeleteEndpointStub != nil {
		return fake.DeleteEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteEndpointReturns.result1, fake.deleteEndpointReturns.result2
}

func (fake *FakeHCSClient) DeleteEndpointCallCount() int {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return len(fake.deleteEndpointArgsForCall)
}

func (fake *FakeHCSClient) DeleteEndpointArgsForCall(i int) *hcsshim.HNSEndpoint {
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	return fake.deleteEndpointArgsForCall[i].arg1
}

func (fake *FakeHCSClient) DeleteEndpointReturns(result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.DeleteEndpointStub = nil
	fake.deleteEndpointReturns = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) DeleteEndpointReturnsOnCall(i int, result1 *hcsshim.HNSEndpoint, result2 error) {
	fake.DeleteEndpointStub = nil
	if fake.deleteEndpointReturnsOnCall == nil {
		fake.deleteEndpointReturnsOnCall = make(map[int]struct {
			result1 *hcsshim.HNSEndpoint
			result2 error
		})
	}
	fake.deleteEndpointReturnsOnCall[i] = struct {
		result1 *hcsshim.HNSEndpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeHCSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getHNSNetworkByNameMutex.RLock()
	defer fake.getHNSNetworkByNameMutex.RUnlock()
	fake.createNetworkMutex.RLock()
	defer fake.createNetworkMutex.RUnlock()
	fake.createEndpointMutex.RLock()
	defer fake.createEndpointMutex.RUnlock()
	fake.getHNSEndpointByIDMutex.RLock()
	defer fake.getHNSEndpointByIDMutex.RUnlock()
	fake.deleteEndpointMutex.RLock()
	defer fake.deleteEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHCSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ network.HCSClient = new(FakeHCSClient)
