// Code generated by counterfeiter. DO NOT EDIT.
package imagefakes

import (
	"sync"

	"code.cloudfoundry.org/winc/image"
)

type FakeLayerManager struct {
	CreateLayerStub        func(string, string, []string) (string, error)
	createLayerMutex       sync.RWMutex
	createLayerArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	createLayerReturns struct {
		result1 string
		result2 error
	}
	createLayerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RemoveLayerStub        func(string) error
	removeLayerMutex       sync.RWMutex
	removeLayerArgsForCall []struct {
		arg1 string
	}
	removeLayerReturns struct {
		result1 error
	}
	removeLayerReturnsOnCall map[int]struct {
		result1 error
	}
	LayerExistsStub        func(string) (bool, error)
	layerExistsMutex       sync.RWMutex
	layerExistsArgsForCall []struct {
		arg1 string
	}
	layerExistsReturns struct {
		result1 bool
		result2 error
	}
	layerExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetLayerMountPathStub        func(string) (string, error)
	getLayerMountPathMutex       sync.RWMutex
	getLayerMountPathArgsForCall []struct {
		arg1 string
	}
	getLayerMountPathReturns struct {
		result1 string
		result2 error
	}
	getLayerMountPathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RetryableStub        func(error) bool
	retryableMutex       sync.RWMutex
	retryableArgsForCall []struct {
		arg1 error
	}
	retryableReturns struct {
		result1 bool
	}
	retryableReturnsOnCall map[int]struct {
		result1 bool
	}
	HomeDirStub        func() string
	homeDirMutex       sync.RWMutex
	homeDirArgsForCall []struct{}
	homeDirReturns     struct {
		result1 string
	}
	homeDirReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLayerManager) CreateLayer(arg1 string, arg2 string, arg3 []string) (string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.createLayerMutex.Lock()
	ret, specificReturn := fake.createLayerReturnsOnCall[len(fake.createLayerArgsForCall)]
	fake.createLayerArgsForCall = append(fake.createLayerArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("CreateLayer", []interface{}{arg1, arg2, arg3Copy})
	fake.createLayerMutex.Unlock()
	if fake.CreateLayerStub != nil {
		return fake.CreateLayerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createLayerReturns.result1, fake.createLayerReturns.result2
}

func (fake *FakeLayerManager) CreateLayerCallCount() int {
	fake.createLayerMutex.RLock()
	defer fake.createLayerMutex.RUnlock()
	return len(fake.createLayerArgsForCall)
}

func (fake *FakeLayerManager) CreateLayerArgsForCall(i int) (string, string, []string) {
	fake.createLayerMutex.RLock()
	defer fake.createLayerMutex.RUnlock()
	return fake.createLayerArgsForCall[i].arg1, fake.createLayerArgsForCall[i].arg2, fake.createLayerArgsForCall[i].arg3
}

func (fake *FakeLayerManager) CreateLayerReturns(result1 string, result2 error) {
	fake.CreateLayerStub = nil
	fake.createLayerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) CreateLayerReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateLayerStub = nil
	if fake.createLayerReturnsOnCall == nil {
		fake.createLayerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createLayerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) RemoveLayer(arg1 string) error {
	fake.removeLayerMutex.Lock()
	ret, specificReturn := fake.removeLayerReturnsOnCall[len(fake.removeLayerArgsForCall)]
	fake.removeLayerArgsForCall = append(fake.removeLayerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveLayer", []interface{}{arg1})
	fake.removeLayerMutex.Unlock()
	if fake.RemoveLayerStub != nil {
		return fake.RemoveLayerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeLayerReturns.result1
}

func (fake *FakeLayerManager) RemoveLayerCallCount() int {
	fake.removeLayerMutex.RLock()
	defer fake.removeLayerMutex.RUnlock()
	return len(fake.removeLayerArgsForCall)
}

func (fake *FakeLayerManager) RemoveLayerArgsForCall(i int) string {
	fake.removeLayerMutex.RLock()
	defer fake.removeLayerMutex.RUnlock()
	return fake.removeLayerArgsForCall[i].arg1
}

func (fake *FakeLayerManager) RemoveLayerReturns(result1 error) {
	fake.RemoveLayerStub = nil
	fake.removeLayerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLayerManager) RemoveLayerReturnsOnCall(i int, result1 error) {
	fake.RemoveLayerStub = nil
	if fake.removeLayerReturnsOnCall == nil {
		fake.removeLayerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeLayerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLayerManager) LayerExists(arg1 string) (bool, error) {
	fake.layerExistsMutex.Lock()
	ret, specificReturn := fake.layerExistsReturnsOnCall[len(fake.layerExistsArgsForCall)]
	fake.layerExistsArgsForCall = append(fake.layerExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("LayerExists", []interface{}{arg1})
	fake.layerExistsMutex.Unlock()
	if fake.LayerExistsStub != nil {
		return fake.LayerExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.layerExistsReturns.result1, fake.layerExistsReturns.result2
}

func (fake *FakeLayerManager) LayerExistsCallCount() int {
	fake.layerExistsMutex.RLock()
	defer fake.layerExistsMutex.RUnlock()
	return len(fake.layerExistsArgsForCall)
}

func (fake *FakeLayerManager) LayerExistsArgsForCall(i int) string {
	fake.layerExistsMutex.RLock()
	defer fake.layerExistsMutex.RUnlock()
	return fake.layerExistsArgsForCall[i].arg1
}

func (fake *FakeLayerManager) LayerExistsReturns(result1 bool, result2 error) {
	fake.LayerExistsStub = nil
	fake.layerExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) LayerExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.LayerExistsStub = nil
	if fake.layerExistsReturnsOnCall == nil {
		fake.layerExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.layerExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) GetLayerMountPath(arg1 string) (string, error) {
	fake.getLayerMountPathMutex.Lock()
	ret, specificReturn := fake.getLayerMountPathReturnsOnCall[len(fake.getLayerMountPathArgsForCall)]
	fake.getLayerMountPathArgsForCall = append(fake.getLayerMountPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetLayerMountPath", []interface{}{arg1})
	fake.getLayerMountPathMutex.Unlock()
	if fake.GetLayerMountPathStub != nil {
		return fake.GetLayerMountPathStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLayerMountPathReturns.result1, fake.getLayerMountPathReturns.result2
}

func (fake *FakeLayerManager) GetLayerMountPathCallCount() int {
	fake.getLayerMountPathMutex.RLock()
	defer fake.getLayerMountPathMutex.RUnlock()
	return len(fake.getLayerMountPathArgsForCall)
}

func (fake *FakeLayerManager) GetLayerMountPathArgsForCall(i int) string {
	fake.getLayerMountPathMutex.RLock()
	defer fake.getLayerMountPathMutex.RUnlock()
	return fake.getLayerMountPathArgsForCall[i].arg1
}

func (fake *FakeLayerManager) GetLayerMountPathReturns(result1 string, result2 error) {
	fake.GetLayerMountPathStub = nil
	fake.getLayerMountPathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) GetLayerMountPathReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetLayerMountPathStub = nil
	if fake.getLayerMountPathReturnsOnCall == nil {
		fake.getLayerMountPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getLayerMountPathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLayerManager) Retryable(arg1 error) bool {
	fake.retryableMutex.Lock()
	ret, specificReturn := fake.retryableReturnsOnCall[len(fake.retryableArgsForCall)]
	fake.retryableArgsForCall = append(fake.retryableArgsForCall, struct {
		arg1 error
	}{arg1})
	fake.recordInvocation("Retryable", []interface{}{arg1})
	fake.retryableMutex.Unlock()
	if fake.RetryableStub != nil {
		return fake.RetryableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.retryableReturns.result1
}

func (fake *FakeLayerManager) RetryableCallCount() int {
	fake.retryableMutex.RLock()
	defer fake.retryableMutex.RUnlock()
	return len(fake.retryableArgsForCall)
}

func (fake *FakeLayerManager) RetryableArgsForCall(i int) error {
	fake.retryableMutex.RLock()
	defer fake.retryableMutex.RUnlock()
	return fake.retryableArgsForCall[i].arg1
}

func (fake *FakeLayerManager) RetryableReturns(result1 bool) {
	fake.RetryableStub = nil
	fake.retryableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLayerManager) RetryableReturnsOnCall(i int, result1 bool) {
	fake.RetryableStub = nil
	if fake.retryableReturnsOnCall == nil {
		fake.retryableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.retryableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLayerManager) HomeDir() string {
	fake.homeDirMutex.Lock()
	ret, specificReturn := fake.homeDirReturnsOnCall[len(fake.homeDirArgsForCall)]
	fake.homeDirArgsForCall = append(fake.homeDirArgsForCall, struct{}{})
	fake.recordInvocation("HomeDir", []interface{}{})
	fake.homeDirMutex.Unlock()
	if fake.HomeDirStub != nil {
		return fake.HomeDirStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.homeDirReturns.result1
}

func (fake *FakeLayerManager) HomeDirCallCount() int {
	fake.homeDirMutex.RLock()
	defer fake.homeDirMutex.RUnlock()
	return len(fake.homeDirArgsForCall)
}

func (fake *FakeLayerManager) HomeDirReturns(result1 string) {
	fake.HomeDirStub = nil
	fake.homeDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLayerManager) HomeDirReturnsOnCall(i int, result1 string) {
	fake.HomeDirStub = nil
	if fake.homeDirReturnsOnCall == nil {
		fake.homeDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.homeDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLayerManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createLayerMutex.RLock()
	defer fake.createLayerMutex.RUnlock()
	fake.removeLayerMutex.RLock()
	defer fake.removeLayerMutex.RUnlock()
	fake.layerExistsMutex.RLock()
	defer fake.layerExistsMutex.RUnlock()
	fake.getLayerMountPathMutex.RLock()
	defer fake.getLayerMountPathMutex.RUnlock()
	fake.retryableMutex.RLock()
	defer fake.retryableMutex.RUnlock()
	fake.homeDirMutex.RLock()
	defer fake.homeDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLayerManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.LayerManager = new(FakeLayerManager)
